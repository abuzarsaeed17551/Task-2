# Import required libraries
import yfinance as yf
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt

# Select stock and load data
ticker = "AAPL"  # You can change to 'TSLA', 'GOOG', etc.
data = yf.download(ticker, start="2020-01-01", end="2025-01-01")

# Prepare the dataset
df = data[["Open", "High", "Low", "Volume", "Close"]].copy()
df.dropna(inplace=True)

# Shift Close column to create the target (next day's Close)
df["Target"] = df["Close"].shift(-1)

# Drop the last row (target will be NaN)
df.dropna(inplace=True)

# Features and target
X = df[["Open", "High", "Low", "Volume"]]
y = df["Target"]

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)

# Initialize and train the model
model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Plot actual vs predicted Close prices
plt.figure(figsize=(10, 6))
plt.plot(y_test.values, label="Actual Close Price", linewidth=2)
plt.plot(y_pred, label="Predicted Close Price", linewidth=2)
plt.title(f"{ticker} - Actual vs Predicted Close Prices")
plt.xlabel("Time (Test Set)")
plt.ylabel("Price")
plt.legend()
plt.tight_layout()
plt.show()

# Print RMSE
rmse = mean_squared_error(y_test, y_pred, squared=False)
print(f"Root Mean Squared Error (RMSE): {rmse:.2f}")
